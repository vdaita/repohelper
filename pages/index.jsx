import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import Link from 'next/link'
import { Button, Card, Flex, TextInput } from "@mantine/core";
import { useEffect, useRef, useState } from 'react';
import createMixpanelInstance from '../utils/Mixpanel';
import { notifications } from "@mantine/notifications";
import supabaseClient from '@/utils/Supabase';


export default function Home() {

  const [user, setUser] = useState();

  const emailInput = useRef();
  const passwordInput = useRef();

  const [projects, setProjects] = useState([]);

  let Mixpanel;
  useEffect(() => {
    Mixpanel = createMixpanelInstance(window.location.origin);
    console.log("Initialized Mixpanel: ", Mixpanel);
    // if(Mixpanel){
    //   Mixpanel.opt_out_tracking();
    // }

    supabaseClient.auth.onAuthStateChange((event, session) => {
      setUser(session?.user);
    });
  }, []);

  let signIn = async () => {
    let {data, error} = supabaseClient.auth.signInWithPassword({"email": emailInputRef.current.value, "password": passwordInputRef.current.value});
    if(error){
      notifications.show({
        title: 'Error',
        message: error.message,
        color: 'red'
      });
    }
  }

  let signUp = async() =>{
    let {data, error} = supabaseClient.auth.signUp({"email": emailInputRef.current.value, "password": passwordInputRef.current.value});
    if(error){
      notifications.show({
        title: 'Error',
        message: error.message,
        color: 'red'
      });
    } 
  }

  let deleteProject = async (projectId) => {
    const { error } = await supabaseClient.from('projects')
      .delete()
      .eq('id', projectId);
    
    if(error){
      console.log("Error in deleteProject: ", error);
      notifications.show({
        title: 'Error deleting project',
        color: 'red'
      });
      return;
    }
  }

  let createNewProject = async (projectName) => {
    const {data, error} = await supabaseClient.from('projects')
      .insert({name: projectName})
      .select();

    if(error){
      console.log("Error in createNewProject: ", error);
      notifications.show({
        title: 'Error adding new project',
        color: 'red'
      });
      return;
    }

    let localProjects = [...projects];
    localProjects.push(data); 
    setProjects(localProjects);
  }

  return (
    <>
      <Head>
        <title>Repohelper</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <div className={styles.description}>
          <p style={{font: 'inter', alignContent: 'flex-start'}}>
            Current repositories <br/>
            <Link href="/chat/mantine" style={{textDecorationLine: 'underline'}}>
              Mantine
            </Link>
          </p>
        </div>
  
        {!user}

        <div className={styles.center}>
          <h1 style={{fontSize: 100}} className={styles.gradient}>Repohelper</h1>
          
          {!user && <Card p="sm" m="md" withBorder shadow="sm" radius="md">
              <TextInput type="email" label="Email" ref={emailInput}></TextInput>
              <TextInput type="password" label="Password" ref={passwordInput}></TextInput>
              <Flex direction="row">
                <Button size="md" onClick={() => signIn()}>Login</Button>
                <Button size="md" onClick={() => signUp()}>Signup</Button>
              </Flex>
            </Card>}

          {user && <>
            <Text size="md">Your Projects</Text>
            <Card p="sm" m="md" withBorder shadow="sm" radius="md">
              <TextInput type="text" label="New Project Name" ref={newProjectNameInput}></TextInput>
              <Button onClick={() => createNewProject(newProjectNameInput.current.value)}>Add Project</Button>
            </Card>

            {projects.map((item, index) => (
              <Card p="sm" m="md" withBorder shadow="sm" radius="md">
                <Text size="md">{item.name}</Text>
                <Flex direction="row">
                  <Button onClick={() => push("/chat/" + item.id)}>Chat</Button>
                  <Button onClick={() => push("/projects/" + item.id)}>Manage sources</Button>
                </Flex>

                <Button color="red" onClick={() => deleteProject(item.id)}>Delete project</Button>
              </Card>
            ))}
          </>}
        </div>
      </main>
    </>
  )
}
